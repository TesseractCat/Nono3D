using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class ModeHandler : MonoBehaviour
{
    
    public bool selectMode = false;
    public bool scrobbleMode = false;
    
    public Vector3Int scrobbleVector;
    public Slider scrobbleSlider;
    
    public Renderer voxelRenderer;
    public VoxelGenerator voxelGenerator;
    public float lerpSpeed = 3.0f;
    
    public float cameraRectShrink = 0.1f;
    
    public RectTransform selectPanel;
    public RectTransform scrobblePanel;
    
    public CameraPanScript cameraHandler;
    
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        //Voxel shader adjustments
        if (selectMode || scrobbleMode) {
            Camera.main.rect = new Rect(0.0f, Mathf.Lerp(Camera.main.rect.y,cameraRectShrink,Time.deltaTime * lerpSpeed), 1.0f, Mathf.Lerp(Camera.main.rect.height,1.0f-cameraRectShrink,Time.deltaTime * lerpSpeed));
        } else {
            Camera.main.rect = new Rect(0.0f, Mathf.Lerp(Camera.main.rect.y,0.0f,Time.deltaTime * lerpSpeed), 1.0f, Mathf.Lerp(Camera.main.rect.height,1.0f,Time.deltaTime * lerpSpeed));
        }

        if (selectMode) {
            voxelRenderer.material.SetFloat("_InnerOutlineThickness", Mathf.Lerp(voxelRenderer.material.GetFloat("_InnerOutlineThickness"), 0.1f, Time.deltaTime * lerpSpeed));
            voxelRenderer.material.SetFloat("_OutlineThickness", Mathf.Lerp(voxelRenderer.material.GetFloat("_OutlineThickness"), 0.02f, Time.deltaTime * lerpSpeed));
            selectPanel.anchoredPosition = new Vector2(0,Mathf.Lerp(selectPanel.anchoredPosition.y, 150, Time.deltaTime * lerpSpeed));
        } else {
            voxelRenderer.material.SetFloat("_InnerOutlineThickness", Mathf.Lerp(voxelRenderer.material.GetFloat("_InnerOutlineThickness"), 0.05f, Time.deltaTime * lerpSpeed));
            voxelRenderer.material.SetFloat("_OutlineThickness", Mathf.Lerp(voxelRenderer.material.GetFloat("_OutlineThickness"), 0.01f, Time.deltaTime * lerpSpeed));
            selectPanel.anchoredPosition = new Vector2(0,Mathf.Lerp(selectPanel.anchoredPosition.y, 0, Time.deltaTime * lerpSpeed));
        }
        
        if (scrobbleMode) {
            scrobblePanel.anchoredPosition = new Vector2(0,Mathf.Lerp(scrobblePanel.anchoredPosition.y, 150, Time.deltaTime * lerpSpeed));
        } else {
            scrobblePanel.anchoredPosition = new Vector2(0,Mathf.Lerp(scrobblePanel.anchoredPosition.y, 0, Time.deltaTime * lerpSpeed));
        }
    }
    
    public void EnableSelectMode() {
        selectMode = true;
    }
    
    public void EnableScrobbleMode(Vector3 normal) {
        scrobbleMode = true;
        scrobbleVector = new Vector3Int((int)-normal.x, (int)-normal.y, (int)-normal.z);
        voxelGenerator.sliceVector = Vector3Int.zero;
        
        scrobbleSlider.maxValue = voxelGenerator.chunkSize-1;
        scrobbleSlider.value = 0.0f;//voxelGenerator.chunkSize;
        
        ScrobbleUpdated();
    }
    
    public void ScrobbleUpdated() {
        voxelGenerator.sliceVector = scrobbleVector * Mathf.RoundToInt(scrobbleSlider.value);
        
        Vector4 _DimVector = 
                new Vector4(voxelGenerator.sliceVector.x+scrobbleVector.x, voxelGenerator.sliceVector.y+scrobbleVector.y, voxelGenerator.sliceVector.z+scrobbleVector.z, 1.0f);
        
        for (int i = 0; i < 3; i++) {
            if (_DimVector[i] < 0) {
                _DimVector[i] = (voxelGenerator.chunkSize + 1) - Mathf.Abs(_DimVector[i]);
            }
        }
        
        voxelRenderer.material.SetVector("_DimVector", _DimVector);
        voxelGenerator.GenerateAndApplyMesh();
    }
    
    public void DisableModes() {
        StartCoroutine(DisableModesCoroutine());
    }
    public IEnumerator DisableModesCoroutine() {
        for (int i = 0; i < cameraHandler.selectionArray.Length; i++) {
            cameraHandler.selectionArray[i] = -Vector4.one;
        }
        
        cameraHandler.touchStartTime = Time.time;
        cameraHandler.velocity = Vector2.zero;
        if (Input.touchCount > 0) {
            cameraHandler.lastTouchPos = cameraHandler.normalizedTouchPosition(Input.GetTouch(0));
        }
        
        yield return new WaitForEndOfFrame(); 
        yield return new WaitForEndOfFrame(); 
        yield return new WaitForEndOfFrame(); 
        selectMode = false;
        scrobbleMode = false;
        voxelGenerator.sliceVector = Vector3Int.zero;
        voxelGenerator.GenerateAndApplyMesh();
        
        voxelRenderer.material.SetVectorArray("_SelectionArray", cameraHandler.selectionArray);
        voxelRenderer.material.SetVector("_DimVector", new Vector4(0.0f, 0.0f, 0.0f, 0.0f));
    }
    
    public void DisableSelectMode() {
        StartCoroutine(DisableSelectModeCoroutine());
    }
    public IEnumerator DisableSelectModeCoroutine() {
        for (int i = 0; i < cameraHandler.selectionArray.Length; i++) {
            cameraHandler.selectionArray[i] = -Vector4.one;
        }
        
        cameraHandler.touchStartTime = Time.time;
        cameraHandler.velocity = Vector2.zero;
        if (Input.touchCount > 0) {
            cameraHandler.lastTouchPos = cameraHandler.normalizedTouchPosition(Input.GetTouch(0));
        }
        
        yield return new WaitForEndOfFrame(); 
        yield return new WaitForEndOfFrame(); 
        yield return new WaitForEndOfFrame(); 
        selectMode = false;
        
        voxelRenderer.material.SetVectorArray("_SelectionArray", cameraHandler.selectionArray);
    }
    
    public void RemoveSelectedVoxels() {
        FindObjectOfType<VoxelGenerator>().RemoveVoxels(cameraHandler.selectionArray);
        DisableSelectMode();
    }
    
    public void HighlightSelectedVoxels() {
        for (var i = 0; i < cameraHandler.selectionArray.Length; i++) {
            //Toggle
            if (cameraHandler.selectionArray[i] != -Vector4.one) {
                Color currentColor = FindObjectOfType<VoxelGenerator>().highlightVolumeTexture.GetPixel(
                            (int)cameraHandler.selectionArray[i].x,(int)cameraHandler.selectionArray[i].y,(int)cameraHandler.selectionArray[i].z,0);
                if (currentColor.a == 1.0f) {
                    currentColor.a = 0.0f;
                } else {
                    currentColor.a = 1.0f;
                }
                FindObjectOfType<VoxelGenerator>().highlightVolumeTexture.SetPixel(
                        (int)cameraHandler.selectionArray[i].x,(int)cameraHandler.selectionArray[i].y,(int)cameraHandler.selectionArray[i].z, currentColor, 0);
            }
        }
        FindObjectOfType<VoxelGenerator>().highlightVolumeTexture.Apply();
        DisableSelectMode();
    }
}
