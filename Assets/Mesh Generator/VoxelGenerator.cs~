using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class VoxelGenerator : MonoBehaviour
{
    MeshFilter filter;
    Mesh mesh;
    MeshCollider collider;
    int[,,] voxelArray;
    public int chunkSize;
    
    public Transform pivotPoint;
    
    public Texture3D highlightVolumeTexture;
    
    public Vector3Int sliceVector;

    // Start is called before the first frame update
    void Start()
    {
        filter = GetComponent<MeshFilter>();
        collider = GetComponent<MeshCollider>();
        mesh = new Mesh();
        filter.mesh = mesh;
       
        //Init(chunkSize, new Dictionary<Vector3Int, int[,]>());
    }
    
    public void Init(int chunkSize, Texture3D indicatorVolumeTexture, int[,,] voxelArray = null) {
        if (voxelArray == null) {
            this.voxelArray = new int[chunkSize,chunkSize,chunkSize]; 
            
            for (int x = 0; x < chunkSize; x++) {
                for (int y = 0; y < chunkSize; y++) {
                    for (int z = 0; z < chunkSize; z++) {
                        this.voxelArray[x,y,z] = 1;
                    }
                }
            }
        } else {
            this.voxelArray = voxelArray;
        }
        
        highlightVolumeTexture = indicatorVolumeTexture;
        
        /*
        highlightVolumeTexture = new Texture3D(chunkSize, chunkSize, chunkSize, TextureFormat.RGBA32, 0);
        Color[] initColors = new Color[chunkSize*chunkSize*chunkSize];
        //System.Random random = new System.Random();
        for (int i = 0; i < chunkSize*chunkSize*chunkSize; i++) {
            initColors[i] = new Color((float)random.Next(0,7)/((float)chunkSize+1.0f),(float)random.Next(0,7)/((float)chunkSize+1.0f),(float)random.Next(0,7)/((float)chunkSize+1.0f),0.0f);
        }
        highlightVolumeTexture.SetPixels(initColors, 0);
        //highlightVolumeTexture.SetPixel(0,0,0,new Color(0.0f,1.0f,1.0f,1.0f),0);
        highlightVolumeTexture.Apply();
        */
        
        Camera.main.transform.position = new Vector3(chunkSize/2, chunkSize/2, -chunkSize * 2.5f);
        
        sliceVector = new Vector3Int(0,0,0);
        
        GenerateAndApplyMesh();
    }
    
    int GetVoxel(Vector3Int pos) {
        if (sliceVector.x + sliceVector.y + sliceVector.z <= 0) {
            if (pos.x >= 0 && pos.y >= 0 && pos.z >= 0 && pos.x < chunkSize + sliceVector.x && pos.y < chunkSize + sliceVector.y && pos.z < chunkSize + sliceVector.z) {
                return voxelArray[pos.x,pos.y,pos.z];
            } else {
                //Out of bounds
                return -1;
            }
        } else {
            if (pos.x >= sliceVector.x && pos.y >= sliceVector.y && pos.z >= sliceVector.z && pos.x < chunkSize && pos.y < chunkSize && pos.z < chunkSize) {
                return voxelArray[pos.x,pos.y,pos.z];
            } else {
                //Out of bounds
                return -1;
            }
        }
    }
    
    public void RemoveVoxels(Vector4[] voxels) {
        for (var i = 0; i < voxels.Length; i++) {
            Vector3Int pos = new Vector3Int((int) voxels[i].x, (int) voxels[i].y, (int) voxels[i].z);
            
            if (GetVoxel(pos) != -1) {
                voxelArray[pos.x,pos.y,pos.z] = 0;
            }
        }
        
        GenerateAndApplyMesh();
    }
    
    Vector3 calculatePivotPoint() {
        Vector3 averagePoint = Vector3.zero;
        int voxels = 0;
        
        for (int x = 0; x < chunkSize; x++) {
            for (int y = 0; y < chunkSize; y++) {
                for (int z = 0; z < chunkSize; z++) {
                    if (GetVoxel(new Vector3Int(x,y,z)) > 0) {//(voxelArray[x,y,z] > 0) {
                        averagePoint += new Vector3(x,y,z);
                        voxels++;
                    }
                }
            }
        }
        
        return averagePoint/voxels;
    }
    
    public void GenerateAndApplyMesh() {
        mesh.Clear();
        
        var (vertices_, normals_, uvs_, triangles_, colors_) = GenerateMesh();
        
        mesh.SetVertices(vertices_);
        mesh.SetNormals(normals_);
        mesh.SetUVs(0, uvs_);
        mesh.SetTriangles(triangles_,0);
        mesh.SetColors(colors_);
        
        mesh.RecalculateBounds();
        mesh.RecalculateNormals();
        
        collider.sharedMesh = mesh;
        
        pivotPoint.position = calculatePivotPoint();
        
        GetComponent<MeshRenderer>().material.SetVector("_OutlineCenter", new Vector4(pivotPoint.position.x, pivotPoint.position.y, pivotPoint.position.z, 0.0f));
        GetComponent<MeshRenderer>().material.SetFloat("_ChunkSize", chunkSize);
        
        Vector4[] selectionArray = Enumerable.Repeat(-Vector4.one, 10).ToArray();
        GetComponent<MeshRenderer>().material.SetVectorArray("_SelectionArray", selectionArray);
        GetComponent<MeshRenderer>().material.SetTexture("_HighlightVolumeTex", highlightVolumeTexture);
    }
    
    (List<Vector3>, List<Vector3>, List<Vector2>, List<int>, List<Color>) GenerateMesh() {
        List<Vector3> vertices_ = new List<Vector3>();
        List<Vector3> normals_ = new List<Vector3>();
        List<Vector2> uvs_ = new List<Vector2>();
        List<int> triangles_ = new List<int>();
        List<Color> colors_ = new List<Color>();
        
        for (int x = 0; x < voxelArray.GetLength(0); x++) {
            for (int y = 0; y < voxelArray.GetLength(1); y++) {
                for (int z = 0; z < voxelArray.GetLength(2); z++) {
                    if (GetVoxel(new Vector3Int(x,y,z)) > 0) {
                        var (tmpVertices, tmpNormals, tmpUVs, tmpTriangles, tmpColors) = GenerateVoxel(new Vector3Int(x,y,z));
                        for (var k = 0; k < tmpTriangles.Count; k++) {
                            tmpTriangles[k] += vertices_.Count;
                        }
                        vertices_.AddRange(tmpVertices);
                        triangles_.AddRange(tmpTriangles);
                        normals_.AddRange(tmpNormals);
                        uvs_.AddRange(tmpUVs);
                        colors_.AddRange(tmpColors);
                    }
                }
            }
        }
        
        return (vertices_, normals_, uvs_, triangles_, colors_);
    }
    
    (List<Vector3>, List<Vector3>, List<Vector2>, List<int>, List<Color>) GenerateVoxel(Vector3Int pos) {
        Vector3Int[] faces = new Vector3Int[] {
            Vector3Int.up, Vector3Int.down,
            Vector3Int.right, Vector3Int.left,
            new Vector3Int(0,0,1), new Vector3Int(0,0,-1)
        };
        
        List<Vector3> vertices_ = new List<Vector3>();
        List<Vector3> normals_ = new List<Vector3>();
        List<Vector2> uvs_ = new List<Vector2>();
        List<int> triangles_ = new List<int>();
        List<Color> colors_ = new List<Color>();
        
        for (var i = 0; i < faces.Length; i++) {
            if (GetVoxel(pos + faces[i]) <= 0) {
                //Set face with chunk position as vertex color
                var (tmpVertices, tmpNormals, tmpUVs, tmpTriangles, tmpColors) =
                    GenerateFace(pos + (0.5f * (Vector3) faces[i]), faces[i], 0.5f, new Color(((float) pos.x)/chunkSize, ((float) pos.y)/chunkSize, ((float) pos.z)/chunkSize, 1.0f));
                
                for (var k = 0; k < tmpTriangles.Length; k++) {
                    tmpTriangles[k] += vertices_.Count;
                }
                triangles_.AddRange(tmpTriangles);
                vertices_.AddRange(tmpVertices);
                normals_.AddRange(tmpNormals);
                uvs_.AddRange(tmpUVs);
                colors_.AddRange(tmpColors);
            }
        }
        
        return (vertices_, normals_, uvs_, triangles_, colors_);
    }
    
    // Vert, Norm, UV, Triangles, Colors
    (Vector3[], Vector3[], Vector2[], int[], Color[]) GenerateFace(Vector3 centerPos, Vector3 normal, float size, Color vertexColor) {
        //                                          
        //  3______0                                
        //   |\   |                                 
        //   | \  |                                 
        //   |  \ |                                 
        //   |___\|                                 
        //  1      2                                
        //                                          
        
        //By default normal = (0,1,0)
        Vector3[] vertices_ = new Vector3[] {
            new Vector3(  size,0,  size),
            new Vector3( -size,0, -size),
            new Vector3(  size,0, -size),
            new Vector3( -size,0,  size)
        };
        int[] triangles_ = new int[] {3,0,2,3,2,1};
        
        Quaternion vecRot = Quaternion.FromToRotation(Vector3.up, normal);
        Quaternion vecRotUp = Quaternion.LookRotation(Vector3.up, normal);
        
        for (var i = 0; i < vertices_.Length; i++) {
            if (Mathf.Abs(normal.y) == 0) {
                vertices_[i] = (vecRotUp * vertices_[i]);
            } else {
                vertices_[i] = (vecRot * vertices_[i]);
            }
            vertices_[i] = vertices_[i] + centerPos;
        }
        
        Vector3[] normals_ = new Vector3[] {
            normal, normal, normal, normal
        };
        
        Vector2[] uvs_ = new Vector2[] {
            new Vector2(1, 1),
            new Vector2(0, 0),
            new Vector2(1, 0),
            new Vector2(0, 1)
        };
        
        Color[] colors_ = new Color[] {
            vertexColor,
            vertexColor,
            vertexColor,
            vertexColor
        };
        
        return (vertices_, normals_, uvs_, triangles_, colors_);
    }
}
